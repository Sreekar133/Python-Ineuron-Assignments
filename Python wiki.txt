This article is about the programming language syntax feature. For other uses, see Offside (disambiguation).

This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.
Find sources: "Off-side rule" – news · newspapers · books · scholar · JSTOR (December 2011) (Learn how and when to remove this template message)
A computer programming language is said to adhere to the off-side rule of syntax if blocks in that language are expressed by their indentation.[1][2] The term was coined by Peter Landin, possibly as a pun on the offside rule in association football. This is contrasted with free-form languages, notably curly-bracket programming languages, where indenting has no computational meaning and indent style is only a matter of coding conventions and formatting.


Contents
1	Definition
2	Code examples
3	Implementation
4	Alternatives
5	Productivity
6	Off-side rule languages
6.1	Programming languages
6.2	Other languages
7	See also
8	References
Definition
Peter Landin, in his 1966 article "The Next 700 Programming Languages", defined the off-side rule thus: "Any non-whitespace token to the left of the first such token on the previous line is taken to be the start of a new declaration."[3]

Code examples
The following is an example of indentation blocks in Python. The colons are part of the Python language syntax for readability; they are not needed to implement the off-side rule.

In Python, the rule is taken to define the boundaries of statements rather than declarations.

def is_even(a):
    """Determine whether number 'a' is even."""
    if a % 2 == 0:
        print('Even!')
        return True
    print('Odd!')
    return False
Python also suspends the off-side rule within brackets. A statement within brackets continues until its brackets match (or mismatch):

{
    "this": True,
    "that": False,
    "them": [1, 2,
3, 4, 5, 
6, 7, 8,
9, 10, 11, 23]
}
In this dictionary, the keys are indented, and a list is split between two lines.

Implementation
The off-side rule can be implemented in the lexical analysis phase, as in Python, where increasing the indenting results in the lexer outputting an INDENT token, and decreasing the indenting results in the lexer outputting a DEDENT token.[4] These tokens correspond to the opening brace { and closing brace } in languages that use braces for blocks, and means that the phrase grammar does not depend on whether braces or indentation are used. This requires that the lexer hold state, namely the current indent level, and thus can detect changes in indentation when this changes, and thus the lexical grammar is not context-free: INDENT and DEDENT depend on the contextual information of the prior indent level.

Alternatives
The primary alternative to delimiting blocks by indenting, popularized by broad use and influence of the language C, is to ignore whitespace characters and mark blocks explicitly with curly brackets (i.e., { and }) or some other delimiter. While this allows for more formatting freedom – a developer might choose not to indent small pieces of code like the break and continue statements – sloppily indented code might lead the reader astray, such as the goto fail bug.

Lisp and other S-expression-based languages do not differentiate statements from expressions, and parentheses are enough to control the scoping of all statements within the language. As in curly bracket languages, whitespace is mostly ignored by the reader (i.e., the read function). Whitespace is used to separate tokens.[5] The explicit structure of Lisp code allows automatic indenting, to form a visual cue for human readers.

Another alternative is for each block to begin and end with explicit keywords. For example, in ALGOL 60 and its descendant Pascal, blocks start with keyword begin and end with keyword end. In some languages (but not Pascal), this means that newlines are important[citation needed] (unlike in curly brace languages), but the indentation is not. In BASIC and Fortran, blocks begin with the block name (such as IF) and end with the block name prepended with END (e.g., END IF). In Fortran, each and every block can also have its own unique block name, which adds another level of explicitness to lengthy code. ALGOL 68 and the Bourne shell (sh, and bash) are similar, but the end of the block is usually given by the name of the block written backward (e.g., case starts a switch statement and it spans until the matching esac; similarly conditionals if...then...[elif...[else...]]fi or for loops for...do...od in ALGOL68 or for...do...done in bash).

An interesting variant of this occurs in Modula-2, a Pascal-like language which does away with the difference between one and multiline blocks. This allows the block opener ({ or BEGIN) to be skipped for all but the function level block, requiring only a block terminating token (} or END). It also fixes dangling else. Custom is for the end token to be placed on the same indent level as the rest of the block, giving a blockstructure that is very readable.

One advantage to the Fortran approach is that it improves readability of long, nested, or otherwise complex code. A group of outdents or closing brackets alone provides no contextual cues as to which blocks are being closed, necessitating backtracking, and closer scrutiny while debugging. Further, languages that allow a suffix for END-like keywords further improve such cues, such as continue versus continue for x. However, modern source code editors often provide visual indicators, such as syntax highlighting, and features such as code folding to assist with these drawbacks.

Productivity
In the language Scala, early versions allowed curly braces only. Scala 3 added an option to use indenting to structure blocks. Designer Martin Odersky said that this improves productivity overall by 10%, turns out to be the most productive change introduced in Scala 3, and advises its use.[6]

Off-side rule languages
Programming languages
ABC
Boo
BuddyScript
Cobra
CoffeeScript
Converge
Curry
Elixir (, do: blocks)
Elm
F# (in early versions, when #light is specified; in later versions when #light "off" is not[7])
Genie
GDScript (Godot Engine)
Haskell[8] (only for where, let, do, or case ... of clauses when braces are omitted)
Inform 7
ISWIM, the abstract language that introduced the rule
LiveScript
Miranda
MoonScript[9][10]
Nemerle, optional mode
Nim
occam
PROMAL
Python
Scala, optional mode
Scheme, when using one of several Scheme Requests for Implementations, the latest of which is SRFI 119
Spin
Woma
XL
Other languages
Haml
Make (build tool: tabs introduce commands in Make rules)
reStructuredText[11]
Sass
Stylus
YAML
Pug (formerly Jade), see Comparison of web template engines
See also
Python syntax and semantics § Indentation
Prettyprint
References
 Hutton, G. (Dec 6, 2012). "Parsing Using Combinators". In Davis, Kei; Hughes, John (eds.). Functional Programming: Proceedings of the 1989 Glasgow Workshop 21–23 August 1989, Fraserburgh, Scotland. Springer Science & Business Media. pp. 362–364. ISBN 9781447131663. Retrieved September 3, 2015.
 Turner, D.A. (August 13, 2013). "Some History of Functional Programming Languages (Invited Talk)". In Loidl, Hans Wolfgang; Peña, Ricardo (eds.). Trends in Functional Programming: 13th International Symposium, TFP 2012, St Andrews, UK, June 12–14, 2012, Revised Selected Papers. Springer. p. 8. ISBN 9783642404474. Retrieved September 3, 2015.
 Landin, P. J. (March 1966). "The next 700 programming languages" (PDF). Communications of the ACM. 9 (3): 157–166. doi:10.1145/365230.365257. S2CID 13409665.
 Python Documentation, 2. Lexical analysis: 2.1.8. Indentation
 "CLHS: Section 2.1.4.7".
 Odersky, Martin (17 June 2020). Martin Odersky: A Scala 3 Update (video). YouTube. Event occurs at 36:35–45:08. Archived from the original on 2021-12-21. Retrieved 2021-04-25.
 Syme, Don. "Detailed Release Notes for the F# May 2009 CTP Update and Visual Studio 2010 Beta1 releases". Archived from the original on 2019-01-21.
 The Haskell Report - Layout
 MoonScript, a language that compiles to Lua
 MoonScript 0.5.0 - Language Guide
 reStructuredText Markup Specification - Indentation
vte
Types of programming languages
Paradigm	
Actor-basedArrayAspect-orientedClass-basedConcatenativeConcurrentDataflowDeclarativeDifferentiableDomain-specificDynamicEsotericEvent-drivenExtensibleFunctionalImperativeLogicMacroMetaprogrammingObject-basedObject-orientedPipelineProceduralPrototype-basedReflectiveRule-basedScriptingStack-orientedSynchronousTactileTemplate
Level	
AssemblyCompiledInterpretedMachine
Low-levelHigh-levelVery high-level
Generation	
FirstSecondThirdFourthFifth
Related	
Non-English-basedVisual
Categories: Programming language topics
Navigation menu
Not logged in
Talk
Contributions
Create account
Log in
ArticleTalk
ReadEditView history
Search
Search Wikipedia
Main page
Contents
Current events
Random article
About Wikipedia
Contact us
Donate
Contribute
Help
Learn to edit
Community portal
Recent changes
Upload file
Tools
What links here
Related changes
Special pages
Permanent link
Page information
Cite this page
Wikidata item
Print/export
Download as PDF
Printable version

Languages
Français
한국어
日本語
粵語
中文
Edit links
This page was last edited on 27 April 2022, at 03:05 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 3.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.